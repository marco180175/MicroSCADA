using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Collections;
using MicroSCADARuntime;
using MicroSCADARuntime.Src.Visuals;
using MicroSCADACustomLibray;

namespace MicroSCADARuntime.Src.Threads
{
    class CThreadExternalTags : CThreadTags
    {
        private CModbusProtocol modbusMaster;
        private CRuntimeExternalTag variable;        
        private Boolean status;
        private delegate void SetTextLog(String Value);        
        private int beginTickCount;
       // private CommLogForm refCommLog;
        /*!
         * 
         */
        public CThreadExternalTags()
            : base()
        {
            this.modbusMaster = null;
            this.variable = null;
            this.status = false;
            //this.refCommLog = CommLog;            
        }
        /*!
         * 
         */
        public ArrayList TagList
        {
            get { return this.tagList; }
        }
        /*!
         * 
         */
        public void SetDriver(CModbusProtocol Value)
        {
            modbusMaster = Value;
        }
        /*!
         * 
         */
        public override void Start()
        {            
            loop = true;
            beginTickCount = Environment.TickCount;
            thread = new Thread(new ThreadStart(Execute));
            thread.Name = "ExternalTags";
            thread.IsBackground = true;
            thread.Start();            
        }
        /*!
         * 
         */
        public override void Stop()
        {
            if (thread != null)
            {
                //Termina loop da thread
                loop = false;
                //Aguarda temino da thread
                thread.Join();
                thread = null;
                if (modbusMaster.CommunicationDevice.IsOpened)
                    modbusMaster.CommunicationDevice.Close();
            }
        }
        /*!
         * 
         */
        protected override void Execute()
        {
            if (tagList.Count > 0)
            {
                if (modbusMaster.CommunicationDevice.Open())
                    ExecuteLoop();
            }            
        }
        /*!
         * 
         */
        private void ExecuteLoop()
        {
            while (loop)
            {
                
                    variable = (CRuntimeExternalTag)tagList[index];
                    if (variable.Enabled)
                    {
                        if ((Environment.TickCount - variable.TickCount) > variable.Scan)
                        {
                            variable.TickCount = Environment.TickCount;
                            if (variable.TagType == CTagType.Read)
                            {   //Variaveis apenas de leitura
                                switch (variable.DataType)
                                {
                                    case CIECDataType.dtBool:
                                        status = modbusMaster.ReadInputStatus(variable.Slave, variable.Address, variable.ArraySize);
                                        break;
                                    case CIECDataType.dtInt:
                                    case CIECDataType.dtUInt:
                                    case CIECDataType.dtDInt:
                                    case CIECDataType.dtUDInt:
                                    case CIECDataType.dtWORD:
                                    case CIECDataType.dtDWORD:
                                        status = modbusMaster.ReadInputRegister(variable.Slave, variable.Address, variable.ArraySize);
                                        break;
                                    default:
                                        status = false;
                                        break;
                                }
                                //
                                UpdateVariable();
                            }
                            else
                            {   //Variaveis de leitura e escrita                                
                                switch (variable.DataType)
                                {
                                    case CIECDataType.dtBool:
                                        status = modbusMaster.ReadCoilStatus(variable.Slave, variable.Address, variable.ArraySize);
                                        break;
                                    case CIECDataType.dtInt:
                                    case CIECDataType.dtUInt:
                                    case CIECDataType.dtDInt:
                                    case CIECDataType.dtUDInt:
                                    case CIECDataType.dtWORD:
                                    case CIECDataType.dtDWORD:
                                        status = modbusMaster.ReadHoldingRegister(variable.Slave, variable.Address, variable.ArraySize);
                                        break;
                                    default:
                                        status = false;
                                        break;
                                }
                                //
                                UpdateVariable();
                            }
                        }
                    }
                    //
                    if (index < tagList.Count - 1)
                        index++;
                    else
                        index = 0;
                }
                //
                Thread.Sleep(10);
               
        }
        /*!
         * 
         */
        protected override void UpdateVariable()
        {
            //
            if (status)
            {
                //Copia buffer para tag
                variable.WriteBuffer(modbusMaster.BufferData.Memory,
                                     modbusMaster.BufferData.Count);
                //Atualiza valores nos campos
                variable.SetFields();
            }
            else
            {

            }
            //
            //SetFrameToCommLog();
            //
            SetElapsedTime();
        }
        /*!
         * 
         */
        private void SetFrameToCommLog()
        {
            lock (this)
            {
                String strDev;
                if (modbusMaster.CommunicationDevice is CTCPClientDevice)
                {
                    CTCPClientDevice commDev = (CTCPClientDevice)modbusMaster.CommunicationDevice;
                    strDev = commDev.Server + ":" + commDev.Port.ToString();
                }
                else if (modbusMaster.CommunicationDevice is CTCPClientDevice)
                {
                    CSerialPortDevice commDev = (CSerialPortDevice)modbusMaster.CommunicationDevice;
                    strDev = commDev.COM;
                }
                else
                    strDev = "";
               
                /*
                if (refCommLog.InvokeRequired)
                {
                    SetTextLog setTextLog;
                    setTextLog = new SetTextLog(refCommLog.Add);
                    refCommLog.Invoke(setTextLog, new object[] { "TX:" + strDev + " , " + modbusMaster.StringTX });
                    refCommLog.Invoke(setTextLog, new object[] { "RX:" + strDev + " , " + modbusMaster.StringRX });
                }
                else
                {
                    //
                    refCommLog.Add("TX:" + strDev + " , " + modbusMaster.StringTX);
                    refCommLog.Add("RX:" + strDev + " , " + modbusMaster.StringRX);
                }
                */
            }
        }
        /*!
         * 
         */
        private void SetElapsedTime()
        {
            lock (this)
            {
                TimeSpan ts = new TimeSpan((Environment.TickCount - beginTickCount) * 10000);
                String strTime = ts.ToString();

                if (variable.slaveOwner.listItem.ListView != null)
                {
                    if (variable.slaveOwner.listItem.ListView.InvokeRequired)
                    {
                        FieldSetValueCallBack setValueCallBack;
                        setValueCallBack = new FieldSetValueCallBack(variable.slaveOwner.SetTime);
                        variable.slaveOwner.listItem.ListView.Invoke(setValueCallBack, new object[] { strTime });
                    }
                    else
                        variable.slaveOwner.SetTime(strTime);
                }
            }
            //return String.Format("{0:D2}:{1:D2}:{2:D2}", ts.Hours, ts.Minutes, ts.Seconds);
        }
    }
}
