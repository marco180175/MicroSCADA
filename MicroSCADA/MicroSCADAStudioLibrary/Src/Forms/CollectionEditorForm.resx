<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADw
        BwAAAk1TRnQBSQFMAgEBAgEAATgBAAE4AQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDCcAAfIBlQEOAfMBlwEUIQAB0wFQAQgBywFLAQABzgFOAQIB0AFUAQYB1gFZ
        AQgB2gFgAQkB2QFiAQkB3wFkAQ9+AAHzAYYBAQH4Ac8BhwH5AdwBmwHxAYgBDB4AAdoBaAEKAeMBfQEK
        Ae4BiwEPAe8BkQEVAfABlwEYAfABnwEgAfYBwwFOAewBigEhewAB8QF9AQAB9QHBAXAB/wH5AewB/gHv
        AdAB9gHGAXEB7gF/AQobAAHaAWsBDwHiAYIBEQHvAZIBFwHtAZQBHAHtAZUBHQHvAaUBMgH2AdQBfwHs
        AYgBIXgAAe8BeAEAAfUBuwFoAf8B+gHsAfwB4QGsAfoB1wGIAfwB4QGfAfQBuwFfAe0BdwEJGAAB2wFy
        ARMB5AGJARkB8AGaAR8B7gGdASYB7wGfASYB8AGuAT0B9gHYAYoB7QGRASV1AAHuAXABAAHyAbMBXAH/
        AfoB6wH8AeIBrQH5AdUBgwH5AdMBgwH5Ac4BegH6AdgBhQHvAa4BSgHpAW8BCBUAAdwBeAEZAecBkwEh
        AfEBowEpAfABpQEwAfABpgEyAfIBtAFHAfgB3gGcAe8BmgErcgAB7QFvAQAB8QGsAVAB/gH4AeQB+wHh
        Aa0B+QHRAX0B+AHSAX8B+AHPAXcB9wHKAW0B9wHHAWUB+QHQAW8B7gGhATkB5wFpAQcSAAHcAXgBHwHo
        AZ4BKwHzAaoBMwHxAawBOQHyAa8BOwHzAbsBUwH5AeIBqwHwAaABMW8AAe0BcQEEAfEBqgFVAf4B/QHx
        AfwB5wG/AfkBzgFwAfgBzwF6AfcBywFyAfcByAFpAfYBwwFhAfYBwAFZAfcBwAFUAfgBywFdAe0BmgEu
        AeYBZwEKDwAB4AGCASUB5wGlATUB9AGzAT4B8gG2AUUB8wG1AUQB9AHCAWEB+gHqAb4B8QGhATdsAAHv
        AYMBBwHuAaABMQH6AeMBnwH5AdUBkwH4AdEBfAH4AcwBcAH3AcgBaAH2AcUBYwH1AcEBWwH2AcABVQHt
        Aa8BSgHfAZcBNwHpAZsBNgHwAbABPgHlAYABGgHlAWUBCAHkAWoBDAHlAXgBFgHiAW4BEAHcAXABDgHX
        AXgBIQHqAaoBQQH2AboBSgH0AbsBUQH0Ab0BVAH2AcUBagH7AecBtgHzAakBQwHqAXgBAwHtAY8BGwHt
        AZUBJQHtAYIBC2AAAe0BggELAe0BlQElAe0BjwEbAeoBeAEDAfMBqQFDAfsB5wG2AfYBxQFqAfQBvQFU
        AfQBuwFRAfYBugFKAeoBqgFBAdcBeAEhAdwBcAEOAeIBbgEQAeUBeAEWAeQBagEMAeUBZQEIAeUBgAEa
        AfABsAE+AekBmwE2Ad8BlwE3Ae0BrwFKAfYBwAFVAfUBwQFbAfYBxQFjAfcByAFoAfgBzAFwAfgB0QF8
        AfkB1QGTAfoB4wGfAe4BoAExAe8BgwEHbAAB8QGhATcB+gHqAb4B9AHCAWEB8wG1AUQB8gG2AUUB9AGz
        AT4B5wGlATUB4AGCASUPAAHmAWcBCgHtAZoBLgH4AcsBXQH3AcABVAH2AcABWQH2AcMBYQH3AcgBaQH3
        AcsBcgH4Ac8BegH5Ac4BcAH8AecBvwH+Af0C8QGqAVUB7QFxAQRvAAHwAaABMQH5AeIBqwHzAbsBUwHy
        Aa8BOwHxAawBOQHzAaoBMwHoAZ4BKwHcAXgBHxIAAecBaQEHAe4BoQE5AfkB0AFvAfcBxwFlAfcBygFt
        AfgBzwF3AfgB0gF/AfkB0QF9AfsB4QGtAf4B+AHkAfEBrAFQAe0Bb3MAAe8BmgErAfgB3gGcAfIBtAFH
        AfABpgEyAfABpQEwAfEBowEpAecBkwEhAdwBeAEZFQAB6QFvAQgB7wGuAUoB+gHYAYUB+QHOAXoB+QHT
        AYMB+QHVAYMB/AHiAa0B/wH6AesB8gGzAVwB7gFwdgAB7QGRASUB9gHYAYoB8AGuAT0B7wGfASYB7gGd
        ASYB8AGaAR8B5AGJARkB2wFyARMYAAHtAXcBCQH0AbsBXwH8AeEBnwH6AdcBiAH8AeEBrAH/AfoB7AH1
        AbsBaAHvAXh5AAHsAYgBIQH2AdQBfwHvAaUBMgHtAZUBHQHtAZQBHAHvAZIBFwHiAYIBEQHaAWsBDxsA
        Ae4BfwEKAfYBxgFxAf4B7wHQAf8B+QHsAfUBwQFwAfEBfXwAAewBigEhAfYBwwFOAfABnwEgAfABlwEY
        Ae8BkQEVAe4BiwEPAeMBfQEKAdoBaAEKHgAB8QGIAQwB+QHcAZsB+AHPAYcB8wGGAQF+AAHfAWQBDwHZ
        AWIBCQHaAWABCQHWAVkBCAHQAVQBBgHOAU4BAgHLAUsBAAHTAVABCCEAAfMBlwEUAfIBlQEOdQABQgFN
        AT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEAAf4BfwHwAQ8EAAH8AT8B8AEPBAAB+AEf
        AfABDwQAAfABDwHwAQ8EAAHgAQcB8AEPBAABwAEDAfABDwQAAYABAQHwAQ8UAAHwAQ8BgAEBBAAB8AEP
        AcABAwQAAfABDwHgAQcEAAHwAQ8B8AEPBAAB8AEPAfgBHwQAAfABDwH8AT8EAAHwAQ8B/gF/BAAL
</value>
  </data>
</root>